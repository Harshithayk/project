// Code generated by MockGen. DO NOT EDIT.
// Source: userService.go
//
// Generated by this command:
//
//	mockgen -source=userService.go -destination=userservice_mock.go -package=servicesgo
//
// Package servicesgo is a generated GoMock package.
package services

import (
	context "context"
	model "project/internal/model"
	reflect "reflect"
    jwt "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockServiceinterface is a mock of Serviceinterface interface.
type MockServiceinterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceinterfaceMockRecorder
}

// MockServiceinterfaceMockRecorder is the mock recorder for MockServiceinterface.
type MockServiceinterfaceMockRecorder struct {
	mock *MockServiceinterface
}

// NewMockServiceinterface creates a new mock instance.
func NewMockServiceinterface(ctrl *gomock.Controller) *MockServiceinterface {
	mock := &MockServiceinterface{ctrl: ctrl}
	mock.recorder = &MockServiceinterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceinterface) EXPECT() *MockServiceinterfaceMockRecorder {
	return m.recorder
}

// CompanyCreate mocks base method.
func (m *MockServiceinterface) CompanyCreate(nc model.CreateCompany) (model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompanyCreate", nc)
	ret0, _ := ret[0].(model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompanyCreate indicates an expected call of CompanyCreate.
func (mr *MockServiceinterfaceMockRecorder) CompanyCreate(nc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompanyCreate", reflect.TypeOf((*MockServiceinterface)(nil).CompanyCreate), nc)
}

// GetAllCompanies mocks base method.
func (m *MockServiceinterface) GetAllCompanies() ([]model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCompanies")
	ret0, _ := ret[0].([]model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCompanies indicates an expected call of GetAllCompanies.
func (mr *MockServiceinterfaceMockRecorder) GetAllCompanies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCompanies", reflect.TypeOf((*MockServiceinterface)(nil).GetAllCompanies))
}

// GetAllJobs mocks base method.
func (m *MockServiceinterface) GetAllJobs() ([]model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllJobs")
	ret0, _ := ret[0].([]model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllJobs indicates an expected call of GetAllJobs.
func (mr *MockServiceinterfaceMockRecorder) GetAllJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllJobs", reflect.TypeOf((*MockServiceinterface)(nil).GetAllJobs))
}

// GetCompany mocks base method.
func (m *MockServiceinterface) GetCompany(id int) (model.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompany", id)
	ret0, _ := ret[0].(model.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompany indicates an expected call of GetCompany.
func (mr *MockServiceinterfaceMockRecorder) GetCompany(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompany", reflect.TypeOf((*MockServiceinterface)(nil).GetCompany), id)
}

// GetJobs mocks base method.
func (m *MockServiceinterface) GetJobs(id int) ([]model.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobs", id)
	ret0, _ := ret[0].([]model.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobs indicates an expected call of GetJobs.
func (mr *MockServiceinterfaceMockRecorder) GetJobs(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobs", reflect.TypeOf((*MockServiceinterface)(nil).GetJobs), id)
}

// JobCreate mocks base method.
func (m *MockServiceinterface) JobCreate(newJob model.NewJobRequest, id uint64) (model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JobCreate", newJob, id)
	ret0, _ := ret[0].(model.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JobCreate indicates an expected call of JobCreate.
func (mr *MockServiceinterfaceMockRecorder) JobCreate(newJob, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JobCreate", reflect.TypeOf((*MockServiceinterface)(nil).JobCreate), newJob, id)
}

// ProccessApplication mocks base method.
func (m *MockServiceinterface) ProccessApplication(ctx context.Context, applicationData []model.NewUserApplication) ([]model.NewUserApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProccessApplication", ctx, applicationData)
	ret0, _ := ret[0].([]model.NewUserApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProccessApplication indicates an expected call of ProccessApplication.
func (mr *MockServiceinterfaceMockRecorder) ProccessApplication(ctx, applicationData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProccessApplication", reflect.TypeOf((*MockServiceinterface)(nil).ProccessApplication), ctx, applicationData)
}

// ProcessJobApplications mocks base method.
func (m *MockServiceinterface) ProcessJobApplications(appData []model.NewUserApplication) ([]model.NewUserApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessJobApplications", appData)
	ret0, _ := ret[0].([]model.NewUserApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessJobApplications indicates an expected call of ProcessJobApplications.
func (mr *MockServiceinterfaceMockRecorder) ProcessJobApplications(appData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessJobApplications", reflect.TypeOf((*MockServiceinterface)(nil).ProcessJobApplications), appData)
}

// UserSignup mocks base method.
func (m *MockServiceinterface) UserSignup(nu model.UserSignup) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", nu)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockServiceinterfaceMockRecorder) UserSignup(nu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockServiceinterface)(nil).UserSignup), nu)
}

// Userlogin mocks base method.
func (m *MockServiceinterface) Userlogin(l model.UserLogin) (jwt.RegisteredClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Userlogin", l)
	ret0, _ := ret[0].(jwt.RegisteredClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Userlogin indicates an expected call of Userlogin.
func (mr *MockServiceinterfaceMockRecorder) Userlogin(l any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Userlogin", reflect.TypeOf((*MockServiceinterface)(nil).Userlogin), l)
}
