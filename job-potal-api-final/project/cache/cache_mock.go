// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source=cache.go -destination=cache_mock.go -package=cache
//
// Package cache is a generated GoMock package.
package cache

import (
	context "context"
	model "project/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCachingRadis is a mock of CachingRadis interface.
type MockCachingRadis struct {
	ctrl     *gomock.Controller
	recorder *MockCachingRadisMockRecorder
}

// MockCachingRadisMockRecorder is the mock recorder for MockCachingRadis.
type MockCachingRadisMockRecorder struct {
	mock *MockCachingRadis
}

// NewMockCachingRadis creates a new mock instance.
func NewMockCachingRadis(ctrl *gomock.Controller) *MockCachingRadis {
	mock := &MockCachingRadis{ctrl: ctrl}
	mock.recorder = &MockCachingRadisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCachingRadis) EXPECT() *MockCachingRadisMockRecorder {
	return m.recorder
}

// AddCache mocks base method.
func (m *MockCachingRadis) AddCache(ctx context.Context, jid uint, jobdata model.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCache", ctx, jid, jobdata)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCache indicates an expected call of AddCache.
func (mr *MockCachingRadisMockRecorder) AddCache(ctx, jid, jobdata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCache", reflect.TypeOf((*MockCachingRadis)(nil).AddCache), ctx, jid, jobdata)
}

// GetCache mocks base method.
func (m *MockCachingRadis) GetCache(ctx context.Context, jid uint) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache", ctx, jid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCache indicates an expected call of GetCache.
func (mr *MockCachingRadisMockRecorder) GetCache(ctx, jid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockCachingRadis)(nil).GetCache), ctx, jid)
}
